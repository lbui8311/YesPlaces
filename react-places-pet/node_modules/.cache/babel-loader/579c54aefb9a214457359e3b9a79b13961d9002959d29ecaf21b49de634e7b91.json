{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sarap\\\\YesPlaces-2\\\\react-places-pet\\\\src\\\\components\\\\Star.js\";\n//Used ChatGPT for help\n\nimport React from 'react';\nimport { Form } from 'react-bootstrap';\nimport { BsStarFill, BsStarHalf, BsStar } from 'react-icons/bs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Star = _ref => {\n  let {\n    rating,\n    onChange\n  } = _ref;\n  const maxRating = 5;\n  // const stars = [1, 2, 3, 4, 5];\n  const handleStarClick = selectedRating => {\n    if (rating === selectedRating) {\n      // If the same star is clicked again, set the rating to 0\n      onChange(0);\n    } else {\n      onChange(selectedRating);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"star-rating\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"star-rating__title\",\n      children: \"Rating:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }, this), [...Array(maxRating)].map((_, index) => {\n      const starValue = index + 1;\n      return /*#__PURE__*/_jsxDEV(Form.Label, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"rating\",\n          value: starValue,\n          checked: starValue <= rating,\n          onChange: () => handleStarClick(starValue),\n          className: \"star-rating__input visually-hidden\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"star-rating__icon\",\n          children: starValue <= rating ? /*#__PURE__*/_jsxDEV(BsStarFill, {\n            className: \"text-warning\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 19\n          }, this) : starValue - 0.5 === rating ? /*#__PURE__*/_jsxDEV(BsStarHalf, {\n            className: \"text-warning\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(BsStar, {\n            className: \"text-warning\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 15\n        }, this)]\n      }, starValue, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this)\n  //      <div className=\"star-rating\">\n  //   <span className=\"star-rating__title\">Rating:</span>\n  //   {[1, 2, 3, 4, 5].map((star) => (\n  //     <label key={star} className=\"star-rating__star\">\n  //       <input\n  //         type=\"radio\"\n  //         name=\"rating\"\n  //         value={star}\n  //         checked={rating === star}\n  //         onChange={() => onChange(star)}\n  //       />\n  //       <span className=\"star-rating__icon\"></span>\n  //     </label>\n  //   ))}\n  // </div>\n  ;\n};\n_c = Star;\nexport default Star;\nvar _c;\n$RefreshReg$(_c, \"Star\");","map":{"version":3,"names":["React","Form","BsStarFill","BsStarHalf","BsStar","jsxDEV","_jsxDEV","Star","_ref","rating","onChange","maxRating","handleStarClick","selectedRating","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Array","map","_","index","starValue","Label","type","name","value","checked","_c","$RefreshReg$"],"sources":["C:/Users/sarap/YesPlaces-2/react-places-pet/src/components/Star.js"],"sourcesContent":["//Used ChatGPT for help\r\n\r\nimport React from 'react';\r\nimport { Form } from 'react-bootstrap';\r\nimport { BsStarFill, BsStarHalf, BsStar } from 'react-icons/bs';\r\n\r\nconst Star = ({ rating, onChange }) => {\r\n    const maxRating = 5;\r\n    // const stars = [1, 2, 3, 4, 5];\r\n    const handleStarClick = (selectedRating) => {\r\n        if (rating === selectedRating) {\r\n          // If the same star is clicked again, set the rating to 0\r\n          onChange(0);\r\n        } else {\r\n          onChange(selectedRating);\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"star-rating\">\r\n        <span className=\"star-rating__title\">Rating:</span>\r\n        {[...Array(maxRating)].map((_, index) => {\r\n          const starValue = index + 1;\r\n          return (\r\n            <Form.Label key={starValue}>\r\n              <input\r\n                type=\"radio\"\r\n                name=\"rating\"\r\n                value={starValue}\r\n                checked={starValue <= rating}\r\n                onChange={() => handleStarClick(starValue)}\r\n                className=\"star-rating__input visually-hidden\"\r\n              />\r\n              <span className=\"star-rating__icon\">\r\n                {starValue <= rating ? (\r\n                  <BsStarFill className=\"text-warning\" />\r\n                ) : starValue - 0.5 === rating ? (\r\n                  <BsStarHalf className=\"text-warning\" />\r\n                ) : (\r\n                  <BsStar className=\"text-warning\" />\r\n                )}\r\n              </span>\r\n            </Form.Label>\r\n          );\r\n        })}\r\n      </div>\r\n    //      <div className=\"star-rating\">\r\n    //   <span className=\"star-rating__title\">Rating:</span>\r\n    //   {[1, 2, 3, 4, 5].map((star) => (\r\n    //     <label key={star} className=\"star-rating__star\">\r\n    //       <input\r\n    //         type=\"radio\"\r\n    //         name=\"rating\"\r\n    //         value={star}\r\n    //         checked={rating === star}\r\n    //         onChange={() => onChange(star)}\r\n    //       />\r\n    //       <span className=\"star-rating__icon\"></span>\r\n    //     </label>\r\n    //   ))}\r\n    // </div>\r\n\r\n   );\r\n  };\r\n\r\nexport default Star;"],"mappings":";AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,UAAU,EAAEC,UAAU,EAAEC,MAAM,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhE,MAAMC,IAAI,GAAGC,IAAA,IAA0B;EAAA,IAAzB;IAAEC,MAAM;IAAEC;EAAS,CAAC,GAAAF,IAAA;EAC9B,MAAMG,SAAS,GAAG,CAAC;EACnB;EACA,MAAMC,eAAe,GAAIC,cAAc,IAAK;IACxC,IAAIJ,MAAM,KAAKI,cAAc,EAAE;MAC7B;MACAH,QAAQ,CAAC,CAAC,CAAC;IACb,CAAC,MAAM;MACLA,QAAQ,CAACG,cAAc,CAAC;IAC1B;EACJ,CAAC;EACD,oBACIP,OAAA;IAAKQ,SAAS,EAAC,aAAa;IAAAC,QAAA,gBAC5BT,OAAA;MAAMQ,SAAS,EAAC,oBAAoB;MAAAC,QAAA,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EAClD,CAAC,GAAGC,KAAK,CAACT,SAAS,CAAC,CAAC,CAACU,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,KAAK;MACvC,MAAMC,SAAS,GAAGD,KAAK,GAAG,CAAC;MAC3B,oBACEjB,OAAA,CAACL,IAAI,CAACwB,KAAK;QAAAV,QAAA,gBACTT,OAAA;UACEoB,IAAI,EAAC,OAAO;UACZC,IAAI,EAAC,QAAQ;UACbC,KAAK,EAAEJ,SAAU;UACjBK,OAAO,EAAEL,SAAS,IAAIf,MAAO;UAC7BC,QAAQ,EAAEA,CAAA,KAAME,eAAe,CAACY,SAAS,CAAE;UAC3CV,SAAS,EAAC;QAAoC;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/C,CAAC,eACFb,OAAA;UAAMQ,SAAS,EAAC,mBAAmB;UAAAC,QAAA,EAChCS,SAAS,IAAIf,MAAM,gBAClBH,OAAA,CAACJ,UAAU;YAACY,SAAS,EAAC;UAAc;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,GACrCK,SAAS,GAAG,GAAG,KAAKf,MAAM,gBAC5BH,OAAA,CAACH,UAAU;YAACW,SAAS,EAAC;UAAc;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,gBAEvCb,OAAA,CAACF,MAAM;YAACU,SAAS,EAAC;UAAc;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QACnC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACG,CAAC;MAAA,GAjBQK,SAAS;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAkBd,CAAC;IAEjB,CAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC;EACP;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAAA;AAGF,CAAC;AAACW,EAAA,GAxDEvB,IAAI;AA0DV,eAAeA,IAAI;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}