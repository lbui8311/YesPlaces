{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sarap\\\\YesPlaces-2\\\\react-places-pet\\\\src\\\\components\\\\Star.js\";\n//Used ChatGPT for help\n\nimport React from 'react';\nimport { Form } from 'react-bootstrap';\nimport { BsStarFill, BsStarHalf, BsStar } from 'react-icons/bs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Star = _ref => {\n  let {\n    rating,\n    onChange\n  } = _ref;\n  const stars = [1, 2, 3, 4, 5];\n  return /*#__PURE__*/_jsxDEV(Form.Group, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: stars.map(star => /*#__PURE__*/_jsxDEV(Form.Check, {\n        inline: true,\n        type: \"radio\",\n        name: \"rating\",\n        id: `star-${star}`,\n        checked: rating === star,\n        value: star,\n        onChange: () => onChange(star),\n        children: [/*#__PURE__*/_jsxDEV(Form.Check.Input, {\n          type: \"radio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Form.Check.Label, {\n          children: star <= rating ? /*#__PURE__*/_jsxDEV(BsStarFill, {\n            className: \"text-warning\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 19\n          }, this) : star - 0.5 === rating ? /*#__PURE__*/_jsxDEV(BsStarHalf, {\n            className: \"text-warning\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(BsStar, {\n            className: \"text-warning\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 15\n        }, this)]\n      }, star, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 7\n  }, this);\n};\n_c = Star;\nexport default Star;\nvar _c;\n$RefreshReg$(_c, \"Star\");","map":{"version":3,"names":["React","Form","BsStarFill","BsStarHalf","BsStar","jsxDEV","_jsxDEV","Star","_ref","rating","onChange","stars","Group","children","map","star","Check","inline","type","name","id","checked","value","Input","fileName","_jsxFileName","lineNumber","columnNumber","Label","className","_c","$RefreshReg$"],"sources":["C:/Users/sarap/YesPlaces-2/react-places-pet/src/components/Star.js"],"sourcesContent":["//Used ChatGPT for help\r\n\r\nimport React from 'react';\r\nimport { Form } from 'react-bootstrap';\r\nimport { BsStarFill, BsStarHalf, BsStar } from 'react-icons/bs';\r\n\r\nconst Star = ({ rating, onChange }) => {\r\n    const stars = [1, 2, 3, 4, 5];\r\n  \r\n    return (\r\n      <Form.Group>\r\n        <div>\r\n          {stars.map((star) => (\r\n            <Form.Check\r\n              inline\r\n              key={star}\r\n              type=\"radio\"\r\n              name=\"rating\"\r\n              id={`star-${star}`}\r\n              checked={rating === star}\r\n              value={star}\r\n              onChange={() => onChange(star)}\r\n            >\r\n              <Form.Check.Input type=\"radio\" />\r\n              <Form.Check.Label>\r\n                {star <= rating ? (\r\n                  <BsStarFill className=\"text-warning\" />\r\n                ) : star - 0.5 === rating ? (\r\n                  <BsStarHalf className=\"text-warning\" />\r\n                ) : (\r\n                  <BsStar className=\"text-warning\" />\r\n                )}\r\n              </Form.Check.Label>\r\n            </Form.Check>\r\n          ))}\r\n        </div>\r\n      </Form.Group>\r\n    );\r\n  };\r\n\r\nexport default Star;"],"mappings":";AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,UAAU,EAAEC,UAAU,EAAEC,MAAM,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhE,MAAMC,IAAI,GAAGC,IAAA,IAA0B;EAAA,IAAzB;IAAEC,MAAM;IAAEC;EAAS,CAAC,GAAAF,IAAA;EAC9B,MAAMG,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAE7B,oBACEL,OAAA,CAACL,IAAI,CAACW,KAAK;IAAAC,QAAA,eACTP,OAAA;MAAAO,QAAA,EACGF,KAAK,CAACG,GAAG,CAAEC,IAAI,iBACdT,OAAA,CAACL,IAAI,CAACe,KAAK;QACTC,MAAM;QAENC,IAAI,EAAC,OAAO;QACZC,IAAI,EAAC,QAAQ;QACbC,EAAE,EAAG,QAAOL,IAAK,EAAE;QACnBM,OAAO,EAAEZ,MAAM,KAAKM,IAAK;QACzBO,KAAK,EAAEP,IAAK;QACZL,QAAQ,EAAEA,CAAA,KAAMA,QAAQ,CAACK,IAAI,CAAE;QAAAF,QAAA,gBAE/BP,OAAA,CAACL,IAAI,CAACe,KAAK,CAACO,KAAK;UAACL,IAAI,EAAC;QAAO;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACjCrB,OAAA,CAACL,IAAI,CAACe,KAAK,CAACY,KAAK;UAAAf,QAAA,EACdE,IAAI,IAAIN,MAAM,gBACbH,OAAA,CAACJ,UAAU;YAAC2B,SAAS,EAAC;UAAc;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,GACrCZ,IAAI,GAAG,GAAG,KAAKN,MAAM,gBACvBH,OAAA,CAACH,UAAU;YAAC0B,SAAS,EAAC;UAAc;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,gBAEvCrB,OAAA,CAACF,MAAM;YAACyB,SAAS,EAAC;UAAc;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QACnC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACe,CAAC;MAAA,GAjBdZ,IAAI;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAkBC,CACb;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACI,CAAC;AAEjB,CAAC;AAACG,EAAA,GAhCEvB,IAAI;AAkCV,eAAeA,IAAI;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}